Arborescence : 
	app/ : La configuration de l'application et autres ressources générales (templates, fichiers de traduction etc...)

	src/ : Le code PHP spécifique au projet

	vendor/ : Classes et bibliothèques exterieures, les entités, les models, et le code général

	web/ : Le repertoire web (point d'entrée du site. CSS, JAVASCRIPT, IMG, PHOTO etc...)
-------------------------------------------
Natures des différents fichiers : 
	app/
		Config/
			- parameters.php :
			Contient les paramètres de connexion à la BDD
		
		- Config.php : 
		Ce fichier est la class qui représente la configuration. Il contient l'inclusion des paramètres (parameters.php) et return la partie connect pour les infos de connexion à la BDD. 

	vendor/
		- autoload.php :
		permet d'inclure les bons fichier lors d'une instanciation (new)
		PLus tard, les noms des namespace seront identiques aux noms de nos dossier, l'autoload pourra donc trouver la route pour inclure les fichiers...
		
	vendor/
		Entity/
			- Produit.php; Commande.php; 	Membre.php : 
			Ces fichiers contiennent le propriétés de nos entités. Les propriétés sont les même que les champs dans la BDD. 
				
	web/
		- index.php : 
		Clé d'entrée de notre application
		
	vendor/
		Manager/
			- PDOManager.php :
			Cette classe représente la connexion à la base de données. Elle contient notre objet PDO grâce auquel nous pourrons effectuer des requêtes. Cette classe est un SINGLETON ! Il ne pourra y avoir qu'une seule connexion à la BDD. 
		
			- EntityRepository.php : 
			Un repository centralise tout ce qui touche à la BDD et à la récupération des entités. Concrètement il ne devrait pas y avoir de requête dans un autre fichier qu'un repository.
		
	vendor/
		Repository/
			- ProduitRepository.php : 
			Ce fichier contient toutes les fonctions liées à l'entité Produit, et demandera à l'EntityRepository d'effectuer les requêtes. Il contiendra également toutes les requêtes spécifiques à cette entité, et qui ne peuvent pas être génériques. 
			
	vendor/
		Controller/
			- Controller.php : 
			C'est le controller général de l'application. Il doit être en mesure d'appeller des repository (en fonction de l'entité), et contient la méthod render() qui permet d'afficher les vues. 
			
		
	src/
		Controller/
			ProduitController.php : 
			Cette classe hérite du controller général, et permet de déclencher toutes les actions spécifiques à l'entité Produit. 
			
			
	web/
		css/, img/, photo/ : à copier/colle de l'ancien site en procédural. Si on avait des dossier JS, FONTS ils seraient dans ce repertoire. 
		
	src/
		Views/
			- layout.html :
			Structure de base de notre site (header, nav, footer). Si notre site comportait plusieurs structure de page diférentes (ex : home et mentions légales ne se ressemblent pas) alors nous aurions plusieurs layouts.
			
	src/
		Views/
			Produit/, Membre/, Commande/ : 
			Chacun de ses dossiers va contenir les vues appartenants à son entité
			
	src/
		Views/
			Produit/
				produit.html, produits.html : 
				Ces deux fichiers sont 2 des vues de l'entité Produit. La premiere (anciennement fiche_produit.php) permet d'afficher la page produit et la seconde une page avec plusieurs (anciennement page boutique.php)
				
			
	vendor/
		Manager/
			Application.php : 
			Interupteur de application. Il récupère les infos dans l'url et instancie la bonne classe, et lance la bonne méthode (action)
			
			
			
			
			
			
			